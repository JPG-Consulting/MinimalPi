#!/bin/bash

INTERACTIVE=True
ASK_TO_REBOOT=0
BLACKLIST=/etc/modprobe.d/raspi-blacklist.conf
CONFIG=/boot/config.txt

calc_wt_size() {
    # NOTE: it's tempting to redirect stderr to /dev/null, so supress error 
    # output from tput. However in this case, tput detects neither stdout or 
    # stderr is a tty and so only gives default 80, 24 values
    WT_HEIGHT=17
    WT_WIDTH=$(tput cols)

    if [ -z "$WT_WIDTH" ] || [ "$WT_WIDTH" -lt 60 ]; then
        WT_WIDTH=80
    fi
    if [ "$WT_WIDTH" -gt 178 ]; then
        WT_WIDTH=120
    fi
    WT_MENU_HEIGHT=$(($WT_HEIGHT-7))
}

do_about() {
    whiptail --msgbox "\
This tool provides a straight-forward way of doing initial
configuration of the Raspberry Pi. Although it can be run
at any time, some of the options may have difficulties if
you have heavily customised your installation.\
" 20 70 1
}

do_expand_rootfs() {
    if ! [ -h /dev/root ]; then
        whiptail --msgbox "/dev/root does not exist or is not a symlink. Don't know how to expand" 20 60 2
        return 0
    fi

    ROOT_PART=$(readlink /dev/root)
    PART_NUM=${ROOT_PART#mmcblk0p}
    if [ "$PART_NUM" = "$ROOT_PART" ]; then
        whiptail --msgbox "/dev/root is not an SD card. Don't know how to expand" 20 60 2
        return 0
    fi

    # NOTE: the NOOBS partition layout confuses parted. For now, let's only 
    # agree to work with a sufficiently simple partition layout
    if [ "$PART_NUM" -ne 2 ]; then
        whiptail --msgbox "Your partition layout is not currently supported by this tool. You are probably using NOOBS, in which case your root filesystem is already expanded anyway." 20 60 2
        return 0
    fi

    LAST_PART_NUM=$(parted /dev/mmcblk0 -ms unit s p | tail -n 1 | cut -f 1 -d:)

    if [ "$LAST_PART_NUM" != "$PART_NUM" ]; then
        whiptail --msgbox "/dev/root is not the last partition. Don't know how to expand" 20 60 2
        return 0
    fi

    # Get the starting offset of the root partition
    PART_START=$(parted /dev/mmcblk0 -ms unit s p | grep "^${PART_NUM}" | cut -f 2 -d:)
    [ "$PART_START" ] || return 1
    # Return value will likely be error for fdisk as it fails to reload the
    # partition table because the root fs is mounted
    fdisk /dev/mmcblk0 <<EOF
p
d
$PART_NUM
n
p
$PART_NUM
$PART_START

p
w
EOF
    ASK_TO_REBOOT=1

    # now set up an init.d script
    cat <<\EOF > /etc/init.d/resize2fs_once &&
#!/bin/sh
### BEGIN INIT INFO
# Provides:          resize2fs_once
# Required-Start:
# Required-Stop:
# Default-Start: 2 3 4 5 S
# Default-Stop:
# Short-Description: Resize the root filesystem to fill partition
# Description:
### END INIT INFO

. /lib/lsb/init-functions

case "$1" in
  start)
    log_daemon_msg "Starting resize2fs_once" &&
    resize2fs /dev/root &&
    rm /etc/init.d/resize2fs_once &&
    update-rc.d resize2fs_once remove &&
    log_end_msg $?
    ;;
  *)
    echo "Usage: $0 start" >&2
    exit 3
    ;;
esac
EOF
    chmod +x /etc/init.d/resize2fs_once &&
    update-rc.d resize2fs_once defaults &&
    if [ "$INTERACTIVE" = True ]; then
        whiptail --msgbox "Root partition has been resized.\nThe filesystem will be enlarged upon the next reboot" 20 60 2
    fi
}

do_overscan() {
    whiptail --msgbox "Not implemented." 20 60 1
}

do_change_pass() {
    whiptail --msgbox "You will now be asked to enter a new password for the pi user" 20 60 1
    passwd pi &&
    whiptail --msgbox "Password changed successfully" 20 60 1
}

do_configure_keyboard() {
    dpkg-reconfigure keyboard-configuration &&
    printf "Reloading keymap. This may take a short while\n" &&
    invoke-rc.d keyboard-setup start
}

do_change_locale() {
    dpkg-reconfigure locales
}

do_change_timezone() {
    dpkg-reconfigure tzdata
}

do_change_hostname() {
    whiptail --msgbox "\
Please note: RFCs mandate that a hostname's labels \
may contain only the ASCII letters 'a' through 'z' (case-insensitive), 
the digits '0' through '9', and the hyphen.
Hostname labels cannot begin or end with a hyphen. 
No other symbols, punctuation characters, or blank spaces are permitted.\
" 20 70 1

    CURRENT_HOSTNAME=`cat /etc/hostname | tr -d " \t\n\r"`
    NEW_HOSTNAME=$(whiptail --inputbox "Please enter a hostname" 20 60 "$CURRENT_HOSTNAME" 3>&1 1>&2 2>&3)
    if [ $? -eq 0 ]; then
        echo $NEW_HOSTNAME > /etc/hostname
        sed -i "s/127.0.1.1.*$CURRENT_HOSTNAME/127.0.1.1\t$NEW_HOSTNAME/g" /etc/hosts
        ASK_TO_REBOOT=1
    fi
}

do_memory_split() {
    whiptail --msgbox "Not implemented." 20 60 1
}

do_overclock() {
    whiptail --msgbox "Not implemented." 20 60 1
}

do_ssh() {
    if [ -e /var/log/regen_ssh_keys.log ] && ! grep -q "^finished" /var/log/regen_ssh_keys.log; then
        whiptail --msgbox "Initial ssh key generation still running. Please wait and try again." 20 60 2
        return 1
    fi
    whiptail --yesno "Would you like the SSH server enabled or disabled?" 20 60 2 \
        --yes-button Enable --no-button Disable
    RET=$?
    if [ $RET -eq 0 ]; then
        if [ $(dpkg-query -W -f='${Status}' openssh-server 2>/dev/null | grep -c "ok installed") -eq 1 ]; then
            update-rc.d ssh enable &&
            invoke-rc.d ssh start &&
            whiptail --msgbox "SSH server enabled" 20 60 1
        else
            if [ $(dpkg-query -W -f='${Status}' dropbear 2>/dev/null | grep -c "ok installed") -eq 0 ]; then
                apt-get -y install dropbear
                if [ $? -ne 0 ]; then
                    whiptail --msgbox "Failed to install SSH server." 20 60 1
                    return 1
                fi
                sed -i 's/DROPBEAR_EXTRA_ARGS=/DROPBEAR_EXTRA_ARGS="-w"/g' /etc/default/dropbear
            fi
            sed -i 's/NO_START=1/NO_START=0/g' /etc/default/dropbear
            whiptail --msgbox "SSH server enabled" 20 60 1
        fi
    elif [ $RET -eq 1 ]; then
        if [ $(dpkg-query -W -f='${Status}' openssh-server 2>/dev/null | grep -c "ok installed") -eq 1 ]; then
            update-rc.d ssh disable &&
            whiptail --msgbox "SSH server disabled" 20 60 1
        elif [ $(dpkg-query -W -f='${Status}' dropbear 2>/dev/null | grep -c "ok installed") -eq 1 ]; then
            sed -i 's/NO_START=0/NO_START=1/g' /etc/default/dropbear
            whiptail --msgbox "SSH server disabled" 20 60 1
        else
            whiptail --msgbox "SSH server is not installed or do not know how to disable." 20 60 1
        fi
    else
        return $RET
    fi
}

disable_raspi_config_at_boot() {
    if [ -e /etc/profile.d/raspi-config.sh ]; then
        rm -f /etc/profile.d/raspi-config.sh
        sed -i /etc/inittab \
            -e "s/^#\(.*\)#\s*RPICFG_TO_ENABLE\s*/\1/" \
            -e "/#\s*RPICFG_TO_DISABLE/d"
        telinit q
    fi
}

do_devicetree() {
    whiptail --msgbox "Not implemented." 20 60 1
}

do_spi() {
    whiptail --msgbox "Not implemented." 20 60 1
}

do_i2c() {
    whiptail --msgbox "Not implemented." 20 60 1
}

do_serial() {
    whiptail --msgbox "Not implemented." 20 60 1
}

do_boot_behaviour() {
    whiptail --msgbox "Not implemented." 20 60 1
}

do_rastrack() {
    whiptail --msgbox "Not implemented." 20 60 1
}

do_camera() {
    whiptail --msgbox "Not implemented." 20 60 1
}

do_update() {
    apt-get update
    whiptail --msgbox "Not implemented." 20 60 1
}

do_audio() {
    AUDIO_OUT=$(whiptail --menu "Choose the audio output" 20 60 10 \
        "0" "Auto" \
        "1" "Force 3.5mm ('headphone') jack" \
        "2" "Force HDMI" \
        3>&1 1>&2 2>&3)
        if [ $? -eq 0 ]; then
            if [ $(dpkg-query -W -f='${Status}' alsa-utils 2>/dev/null | grep -c "ok installed") -eq 0 ]; then
                apt-get -y install alsa-utils
                if [ $? -ne 0 ]; then
                    whiptail --mgbox "Failed to install alsa-utils." 20 60 1
                    return 1
                fi
            fi
            amixer cset numid=3 "$AUDIO_OUT"
        fi
}

do_finish() {
    disable_raspi_config_at_boot
    if [ $ASK_TO_REBOOT -eq 1 ]; then
        whiptail --yesno "Would you like to reboot now?" 20 60 2
        if [ $? -eq 0 ]; then # yes
            sync
            reboot
        fi
    fi
    exit 0
}

do_internationalisation_menu() {
    FUN=$(whiptail --title "Raspberry Pi Software Configuration Tool (raspi-config)" --menu "Internationalisation Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
        "I1 Change Locale" "Set up language and regional settings to match your location" \
        "I2 Change Timezone" "Set up timezone to match your location" \
        "I3 Change Keyboard Layout" "Set the keyboard layout to match your keyboard" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            I1\ *) do_change_locale ;;
            I2\ *) do_change_timezone ;;
            I3\ *) do_configure_keyboard ;;
            *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    fi
}

do_advanced_menu() {
    FUN=$(whiptail --title "Raspberry Pi Software Configuration Tool (raspi-config)" --menu "Advanced Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
        "A1 Overscan" "You may need to configure overscan if black bars are present on display" \
        "A2 Hostname" "Set the visible name for this Pi on a network" \
        "A3 Memory Split" "Change the amount of memory made available to the GPU" \
        "A4 SSH" "Enable/Disable remote command line access to your Pi using SSH" \
        "A5 Device Tree" "Enable/Disable the use of Device Tree" \
        "A6 SPI" "Enable/Disable automatic loading of SPI kernel module (needed for e.g. PiFace)" \
        "A7 I2C" "Enable/Disable automatic loading of I2C kernel module" \
        "A8 Serial" "Enable/Disable shell and kernel messages on the serial connection" \
        "A9 Audio" "Force audio out through HDMI or 3.5mm jack" \
        "A0 Update" "Update this tool to the latest version" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        return 0
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            A1\ *) do_overscan ;;
            A2\ *) do_change_hostname ;;
            A3\ *) do_memory_split ;;
            A4\ *) do_ssh ;;
            A5\ *) do_devicetree ;;
            A6\ *) do_spi ;;
            A7\ *) do_i2c ;;
            A8\ *) do_serial ;;
            A9\ *) do_audio ;;
            A0\ *) do_update ;;
            *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    fi
}

# Everything else needs to be run as root
if [ $(id -u) -ne 0 ]; then
  printf "Script must be run as root. Try 'sudo raspi-config'\n"
  exit 1
fi

#
# Interactive use loop
#
calc_wt_size
while true; do
    FUN=$(whiptail --title "Raspberry Pi Software Configuration Tool (raspi-config)" --menu "Setup Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Finish --ok-button Select \
        "1 Expand Filesystem" "Ensures that all of the SD card storage is available to the OS" \
        "2 Change User Password" "Change password for the default user (pi)" \
        "3 Enable Boot to Desktop/Scratch" "Choose whether to boot into a desktop environment, Scratch, or the command-line" \
        "4 Internationalisation Options" "Set up language and regional settings to match your location" \
        "5 Enable Camera" "Enable this Pi to work with the Raspberry Pi Camera" \
        "6 Add to Rastrack" "Add this Pi to the online Raspberry Pi Map (Rastrack)" \
        "7 Overclock" "Configure overclocking for your Pi" \
        "8 Advanced Options" "Configure advanced settings" \
        "9 About raspi-config" "Information about this configuration tool" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        do_finish
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            1\ *) do_expand_rootfs ;;
            2\ *) do_change_pass ;;
            3\ *) do_boot_behaviour ;;
            4\ *) do_internationalisation_menu ;;
            5\ *) do_camera ;;
            6\ *) do_rastrack ;;
            7\ *) do_overclock ;;
            8\ *) do_advanced_menu ;;
            9\ *) do_about ;;
            *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
    else
        exit 1
    fi
done
